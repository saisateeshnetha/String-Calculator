{"version":3,"sources":["Components/Assessment.js","App.js","reportWebVitals.js","index.js"],"names":["Assessment","useState","input","setInput","result","setResult","error","setError","style","padding","maxWidth","margin","textAlign","className","marginTop","type","class","placeholder","value","onChange","e","target","width","marginBottom","onClick","sum","numbers","delimiter","startsWith","delimiterMatch","match","RegExp","slice","length","numArray","split","filter","num","map","Number","negatives","Error","join","some","isNaN","reduce","add","message","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAuFeA,MArFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA0CA,OACE,qBACEC,MAAO,CACLC,QAAS,OACTC,SAAU,QACVC,OAAQ,SACRC,UAAW,UALf,SAQE,qBAAKC,UAAU,OAAQL,MAAO,CAACM,UAAU,SAAzC,SACE,sBAAKD,UAAU,YAAf,UACE,oBAAIA,UAAU,wBAAd,+BACA,uBACEE,KAAK,OACLC,MAAM,eACNC,YAAY,4BACZC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAASiB,EAAEC,OAAOH,QACnCV,MAAO,CAAEc,MAAO,OAAQb,QAAS,OAAQc,aAAc,UAEzD,wBACEC,QAhCc,WACtB,IACE,IAAMC,EA/BV,SAAaC,GACX,GAAgB,KAAZA,EAAgB,OAAO,EAC3B,IAAIC,EAAY,OAEhB,GAAID,EAAQE,WAAW,MAAO,CAC5B,IAAMC,EAAiBH,EAAQI,MAAM,eACjCD,IACFF,EAAY,IAAII,OAAOF,EAAe,IACtCH,EAAUA,EAAQM,MAAMH,EAAe,GAAGI,SAI9C,IAAMC,EAAWR,EACdS,MAAMR,GACNS,QAAO,SAACC,GAAD,MAAiB,KAARA,KAChBC,IAAIC,QAEDC,EAAYN,EAASE,QAAO,SAACC,GAAD,OAASA,EAAM,KACjD,GAAIG,EAAUP,OAAS,EACrB,MAAM,IAAIQ,MAAJ,wCAA2CD,EAAUE,KAAK,QAGlE,GAAIR,EAASS,KAAKC,OAChB,MAAM,IAAIH,MAAM,8CAGlB,OAAOP,EAASW,QAAO,SAACpB,EAAKY,GAAN,OAAcZ,EAAMY,IAAK,GAKlCS,CAAI5C,GAChBG,EAAUoB,GACVlB,EAAS,IACT,MAAOa,GACPb,EAASa,EAAE2B,SACX1C,EAAU,QA0BJU,KAAK,SACLC,MAAM,2BACNR,MAAO,CAAEC,QAAS,aAJpB,uBAQY,OAAXL,GACC,qBAAIS,UAAU,YAAd,qBACWX,EADX,cAC6BE,KAG9BE,GAAS,mBAAGE,MAAO,CAAEwC,MAAO,OAAnB,SAA6B1C,YCrElC2C,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4ebc9801.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Assessment() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  function add(numbers) {\r\n    if (numbers === \"\") return 0;\r\n    let delimiter = /,|\\n/;\r\n\r\n    if (numbers.startsWith(\"//\")) {\r\n      const delimiterMatch = numbers.match(/^\\/\\/(.+)\\n/);\r\n      if (delimiterMatch) {\r\n        delimiter = new RegExp(delimiterMatch[1]);\r\n        numbers = numbers.slice(delimiterMatch[0].length);\r\n      }\r\n    }\r\n\r\n    const numArray = numbers\r\n      .split(delimiter)\r\n      .filter((num) => num !== \"\")\r\n      .map(Number);\r\n\r\n    const negatives = numArray.filter((num) => num < 0);\r\n    if (negatives.length > 0) {\r\n      throw new Error(`Negative numbers not allowed: ${negatives.join(\", \")}`);\r\n    }\r\n\r\n    if (numArray.some(isNaN)) {\r\n      throw new Error(\"Invalid input! Please enter valid numbers.\");\r\n    }\r\n\r\n    return numArray.reduce((sum, num) => sum + num, 0);\r\n  }\r\n\r\n  const handleCalculate = () => {\r\n    try {\r\n      const sum = add(input);\r\n      setResult(sum);\r\n      setError(\"\");\r\n    } catch (e) {\r\n      setError(e.message);\r\n      setResult(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: \"20px\",\r\n        maxWidth: \"700px\",\r\n        margin: \"0 auto\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <div className=\"card\"  style={{marginTop:\"200px\"}}>\r\n        <div className=\"card-body\">\r\n          <h1 className=\"mt-3 mb-5 text-danger\">String Calculator</h1>\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            placeholder=\"Enter number Example: 1,2\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n          />\r\n          <button\r\n            onClick={handleCalculate}\r\n            type=\"button\"\r\n            class=\"btn btn-danger mt-2 mb-2\"\r\n            style={{ padding: \"10px 20px\" }}\r\n          >\r\n            Calculate\r\n          </button>\r\n          {result !== null && (\r\n            <h2 className=\"mt-2 mb-2\">\r\n              Input: \"{input}\", Output: {result}\r\n            </h2>\r\n          )}\r\n          {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Assessment;\r\n","import \"./App.css\";\nimport Assessment from \"./Components/Assessment\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Assessment />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}